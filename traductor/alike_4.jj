//*****************************************************************
// File:   alike.jj
// Author: Jorge Rodilla Esteve 845389 Enrique Martinez Casanova 839773
// Date:   marzo 2024
// Coms:   compilar mediante "ant"
//*****************************************************************

options {
	IGNORE_CASE = true;			// Comparaciones de tokens case-insensitive
	COMMON_TOKEN_ACTION = false;
}

PARSER_BEGIN(alike)

package traductor;

import lib.symbolTable.*;
import lib.symbolTable.exceptions.*;
import java.util.*;
import lib.attributes.*;
import lib.tools.codeGeneration.*;

public class alike {
	static SymbolTable st;
	static SemanticFunction sf;
	public static CodeBlock bloque;


	public static int codigo_estado;
	public static int nivel_bloque;

	public static int[] sig;

	public static void codigo_error() {codigo_estado = 1;}

	public static void main(String[] args) {
		st = new SymbolTable();
		sf = new SemanticFunction();
		codigo_estado = 0;
		nivel_bloque = 0;
		bloque = new CodeBlock();

		sig = new int[SymbolTable.ST_SIZE];
		for (int i = 0; i < sig.length; i++) sig[i] = 3;

	   alike parser = null;
		try {
		    if (args.length == 0) {
			   parser = new alike(System.in);
			}
		    else {
			   args[0] += ".al";
			   parser = new alike(new java.io.FileInputStream(args[0]));
		    }
		   parser.Programa();
	    }
	    catch (java.io.FileNotFoundException e) {
		   System.err.println ("Fichero " + args[0] + " no encontrado.");
	    }
	    catch (TokenMgrError e) {
		   System.err.println("LEXICAL ERROR: " + e.getMessage());
	    }
	    catch (ParseException e) {
		   System.err.println("PARSE ERROR: " + e.getMessage());
		}
	    catch (Exception e) {
			System.err.println("Finalizo traducción por detección de error no controlado: \n\t" + e.getMessage());
			System.err.println("Se ha producido la excepción: \n\t" + e.getClass().getName());
  		}
		if (codigo_estado == 0) {
			System.out.println("Se ha compilado correctamente, se genera código");
		}
		else {
			System.out.println("Se han producido errores semánticos, no se genera código");
		}
		System.exit(codigo_estado);
	}
}

PARSER_END(alike)

TOKEN : {
	<#tLETRA: (["a"-"z"])>
|	<#tDIGITO: ["0"-"9"]>
|	<#tCARACTER: (~["\t","\n","\r"])>
}

TOKEN : {
	<tBOOL: "boolean">
|	<tCHAR: "character">
|	<tINT: "integer">
|   <tASIG: ":=">
|   <tDISTINTO: "/=">
|   <tIGUAL: "=">
|   <tMAYOR: ">">
|   <tMENOR: "<">
|   <tMENORIGUAL: "<=">
|   <tMAYORIGUAL: ">=">
|   <tOPMAS: "+">
|   <tOPMENOS: "-">
|   <tOPMULT: "*">
|   <tOPDIV: "/">
|   <tBARRAB: "_">
|   <tIF: "if">
|   <tAND: "and">
|   <tOR: "or">
|   <tNOT: "not">
|   <tTHEN: "then">
|   <tELSE: "else">
|   <tELSIF: "elsif">
|   <tPC: ";">
|   <tPUNTOS: "..">
|   <tCOMA: ",">
|   <tWHILE: "while">
|   <tTRUE: "true">
|   <tFALSE: "false">
|   <tLOOP: "loop">
|   <tPROC: "procedure">
|   <tFUNC: "function">
|   <tIS: "is">
|	<tBEGIN: "begin">
|	<tEND: "end">	
|	<tOPMOD: "mod">
|	<tOF: "of">
|	<tREF: "ref">
|	<tAP: "(">
|	<tCP: ")">
|	<tAC: "[">
|	<tCC: "]">
|	<tARRAY: "array">
|	<tDOSP: ":">
|	<tRETURN: "return">
|	<tNULL: "null">
|	<tEXIT: "exit">
|	<tINT2CHAR: "int2char">
|	<tCHAR2INT: "char2int">
|	<tNUM: (<tDIGITO>)+>
|	<tID: (<tLETRA > | <tBARRAB>) (<tLETRA> | <tDIGITO> | <tBARRAB>)*>
|	<tSTRING: "\""(<tCARACTER>)*"\"">
|	<tCONSTCHAR: "\'"<tCARACTER>"\'">
}

SKIP :
{
	" "
|	"\t"
|	"\n"
|	"\r"
|	<tCOMMENT : "--" (<tCARACTER>)*>
}


void Programa() : 
{
}
{
	{st.insertBlock();}
	Programa_completo()
	{st.removeBlock();}
	<EOF>
}


void Declaracion() : // Cada linea de declaracion dispara esta produccion
{
	ArrayList<String> array_nombres_variables;	// Estas variables son del mismo tipo
	Symbol tipo_variables;						// UN simbolo sin nombre
	Token linea;
}
{
	{array_nombres_variables = new ArrayList<String>();}
	(Lista_IDS(array_nombres_variables) linea = <tDOSP> tipo_variables = Tipos_variables())
	{sf.Declaracion(array_nombres_variables, tipo_variables, st, linea);}
}


// Devuelve UN simbolo sin nombre del tipo correspondiente
Symbol Tipos_variables() :
{
	Symbol result;
}
{
	(result = Tipo_variable() | result = Tipo_array())
	{return result;}
}


// Array por referencia de IDs leidos
void Lista_IDS(ArrayList<String> array_nombres_variables) :
{
	Token t;
}
{
	t = <tID> {array_nombres_variables.add(t.image.toLowerCase());} (<tCOMA> Lista_IDS(array_nombres_variables))?
}


// Devuelve un puntero a símbolo sin nombre
Symbol Tipo_variable() :
{
	Token t;
	Symbol result = null;
}
{
	(t = <tBOOL> | t = <tINT> | t = <tCHAR>)
	{return sf.Tipo_variable(t, result);}
}


// Simbolo de tipo array sin nombre
Symbol Tipo_array() :
{
	Token indMin, indMax;
	Symbol tipo_base;
	Token ind_menor = null, ind_mayor = null;
}
{
	<tARRAY> <tAP> (ind_menor = <tOPMAS> | ind_menor = <tOPMENOS>)? indMin = <tNUM> <tPUNTOS>
	(ind_mayor = <tOPMAS> | ind_mayor = <tOPMENOS>)? indMax = <tNUM> <tCP> <tOF> tipo_base = Tipo_variable()
	{return sf.Tipo_array(indMin, indMax, tipo_base, ind_menor, ind_mayor);}
}


Trio Expresion() :
{
	Trio tipo;
	Trio tipo2 = new Trio();
	boolean match2 = false;
	Token t = null;
}
{
	tipo = Relacion() ((t = <tAND> tipo2 = Relacion()
	{
		sf.verificar_bool_expresion(tipo, tipo2, t);
	})+
	| (t = <tOR> tipo2 = Relacion()
	{
		sf.verificar_bool_expresion(tipo, tipo2, t);
	})+)?
	{return tipo;}
}


Trio Relacion() :
{
	Trio tipo;
	Trio tipo2 = new Trio();
	Token op = null;
	boolean match = false;
}
{
	tipo = Expresion_simple() (op = Operador_relacional() tipo2 = Expresion_simple() {match=true;})?
	{
		if (match) sf.verificar_relacion(op, tipo, tipo2);
		return tipo;
	}
}


Token Operador_relacional() :
{
	Token t;
}
{
    (t = <tIGUAL> | t = <tMENOR> | t = <tMAYOR> | t = <tMENORIGUAL> | t = <tMAYORIGUAL> | t = <tDISTINTO>)
	{return t;}
}


Token Operador_multiplicativo() :
{
	Token t;
}
{
    (t = <tOPMULT> | t = <tOPMOD> | t = <tOPDIV>)
	{return t;}
}


Trio Expresion_simple() :
{
	Trio tipo;
	Trio tipo2 = new Trio();
	boolean match1 = false;
	Token t = null;
}
{
	((t = <tOPMAS> | t = <tOPMENOS>) {match1=false;})? tipo = Termino() ((t = <tOPMAS> | t = <tOPMENOS>)  tipo2 = Termino()
	{sf.verificar_int(tipo, tipo2, t);})*
	{
		if (match1) {
			tipo.referencia = false;
			if (t.image.equals("-")) {
				alike.bloque.addInst(PCodeInstruction.OpCode.NGI);
			}
		}
		return tipo;
	}
}


Trio Termino() :
{
	Trio tipo = new Trio();
	Trio tipo2 = new Trio();
	Token t;
}
{
    tipo = Factor() (t = Operador_multiplicativo() tipo2 = Factor()
	{sf.verificar_int(tipo, tipo2, t);})*
	{return tipo;}
}


Trio Factor() :
{
	Trio tipo = new Trio();
	Trio tipo2 = new Trio();
	boolean match = false;
	Token t = null;
}
{
	(tipo = Primario() | t = <tNOT> tipo2 = Primario() {match = true;})
	{
		if (match) {
			tipo.referencia = false;
			if (tipo2.tipo != Symbol.Types.BOOL) {
				tipo.tipo = Symbol.Types.UNDEFINED;
				sf.esperaba_tipo(Symbol.Types.BOOL, t.beginLine, t.beginColumn);
			}
			else {
				tipo.tipo = Symbol.Types.BOOL;
				bloque.addInst(PCodeInstruction.OpCode.NGB);
			}
		}
		return tipo;
	}
}


Trio Primario() :
{
	Token t;
	Trio tipo = new Trio();
	Symbol simbolo = null;
	ArrayList<Trio> lista_argumentos = new ArrayList<>();
	Trio argumento;
}
{
    (<tAP> tipo = Expresion() <tCP>
|	t = <tCHAR2INT> <tAP> tipo = Expresion() <tCP>
	{
		if (tipo.tipo != Symbol.Types.CHAR) sf.esperaba_tipo(Symbol.Types.CHAR, t.beginLine, t.beginColumn);
		else {
			// Genera código
		}
	}
|	t = <tINT2CHAR> <tAP> tipo = Expresion() <tCP>
	{
		if (tipo.tipo != Symbol.Types.INT) sf.esperaba_tipo(Symbol.Types.INT, t.beginLine, t.beginColumn);
		else {
			// Genera código
		}
	}
|	LOOKAHEAD(2) t = <tID> <tAP> argumento = Expresion() {lista_argumentos.add(argumento);}
	(<tCOMA> argumento = Expresion() {lista_argumentos.add(argumento);})* <tCP>
	{tipo = sf.verificar_expresion(t, lista_argumentos, st);}
|	t = <tID> {sf.Primario_ID(t, tipo, st);}
|	t = <tNUM> {tipo.tipo = Symbol.Types.INT; bloque.addInst(PCodeInstruction.OpCode.STC, Integer.parseInt(t.image));}
|	t = <tCONSTCHAR> {tipo.tipo = Symbol.Types.CHAR; bloque.addInst(PCodeInstruction.OpCode.STC, Integer.parseInt(t.image));}
|	t = <tSTRING> {tipo.tipo = Symbol.Types.STRING; tipo.nombre = t.image;}
|	t = <tTRUE> {tipo.tipo = Symbol.Types.BOOL; bloque.addInst(PCodeInstruction.OpCode.STC, 1);}
|	t = <tFALSE> {tipo.tipo = Symbol.Types.BOOL; bloque.addInst(PCodeInstruction.OpCode.STC, 0);})
	{return tipo;}
}


void Asignacion() :
{
	Token id;
	Trio tipo_asignacion;
	Token t;
}
{
	id = <tID> t = <tASIG> tipo_asignacion = Expresion()
	{sf.Asignacion(id.image.toLowerCase(), tipo_asignacion, st, t);}
}


void Instruccion_sin_return() :
{
	Token id = null;
	boolean llamada_funcion_simple = true;
	ArrayList<Symbol> lista_param = null;
}
{
	(LOOKAHEAD(2) Asignacion() // Asignacion a variable no array
	| LOOKAHEAD(2) id = <tID> (Instr_funcion_vector(id.image.toLowerCase()) {llamada_funcion_simple = false;})?
	{
		// Llamada a procedimiento sin parámetros, recordar caso skip_line
		if (llamada_funcion_simple) {
			lista_param = sf.funcion_proc(id.image.toLowerCase(), id, st);
			if (lista_param != null) {
				if (lista_param.size() != 0) {
					// Error, se ha llamado como void sin parámetros a un void que sí que tiene
				}
			}
		}
	}
	| Instr_condicional_sin_return() | Instr_iterativa_sin_return()
	| <tEXIT>
	| <tNULL>) <tPC>
}


boolean Instruccion_con_return(Symbol.Types tipo_a_retornar) :
{
	Token id = null;
	boolean llamada_funcion_simple = true;
	Trio tipo_return = null;
	boolean es_return = false;
	boolean return_if = false;
	Token t = null;
	ArrayList<Symbol> lista_param = null;
}
{
	(LOOKAHEAD(2) Asignacion() // Asignacion a variable no array
	| LOOKAHEAD(2) id = <tID> (Instr_funcion_vector(id.image.toLowerCase()) {llamada_funcion_simple = false;})?
	{
		// Llamada a procedimiento sin parámetros, recordar caso skip_line
		if (llamada_funcion_simple) {
			lista_param = sf.funcion_proc(id.image.toLowerCase(), id, st);
			if (lista_param != null) {
				if (lista_param.size() != 0) {
					// Error, se ha llamado como void sin parámetros a un void que sí que tiene
				}
			}
		}
	}
	| return_if = Instr_condicional_con_return(tipo_a_retornar) | Instr_iterativa_con_return(tipo_a_retornar)
	| <tNULL>
	| <tEXIT>
	| t = <tRETURN> tipo_return = Expresion() {es_return = true;})
	<tPC>
	{return es_return || return_if;}
}


void Instr_funcion_vector(String id) :
{
	Trio tipo;
}
{
	<tAP> tipo = Expresion() Instr_funcion_vector_2(id, tipo)
}


void Instr_funcion_vector_2(String id, Trio tipo) :
{
	Trio argumento;
	ArrayList<Symbol> lista_parametros = null;
	ArrayList<Trio> lista_argumentos = new ArrayList<>();
	Token t = null;
	int iterador_argumentos = 1;
	boolean error_sacado = false;
}
{
	t = <tCP> Instr_funcion_vector_3(id, tipo, t)

	|	// Matching de las llamadas a procedimientos con más de un argumento
	{
		lista_argumentos.add(tipo);
		lista_parametros = sf.funcion_proc(id, t, st);
		if (lista_parametros != null) {
			if (lista_parametros.size() > 0) {
				sf.verificar_argumento(tipo, lista_parametros, 0);
			}
			else {
				error_sacado = true;
				sf.error("El número de argumentos en la llamada a " + id + " no coincide", t.beginLine, t.beginColumn);
			}
		}
	}
	(t = <tCOMA> argumento = Expresion()
	{
		lista_argumentos.add(argumento);
		if (lista_parametros != null) {
			if (iterador_argumentos < lista_parametros.size()) {
				sf.verificar_argumento(argumento, lista_parametros, iterador_argumentos);
				iterador_argumentos++;
			}
			else if (!error_sacado) {
				error_sacado = true;
				sf.error("El número de argumentos en la llamada a " + id + " no coincide", t.beginLine, t.beginColumn);
			}
		}
	})+ <tCP>
	{
		if (lista_parametros != null && lista_argumentos.size() != lista_parametros.size() && !error_sacado) {
			error_sacado = true;
			sf.error("El número de argumentos en la llamada a " + id + " no coincide", t.beginLine, t.beginColumn);
		}
	}
}


void Instr_funcion_vector_3(String id, Trio primera_expresion, Token t) :
{
	Trio tipo_asignacion;
	ArrayList<Symbol> lista_parametros = null;
}
{
	// Matching de asignacion a componente de array, "primera_expresion" es el tipo del índice
	t = <tASIG> tipo_asignacion = Expresion()
	{
		sf.Instr_funcion_vector_3(id, primera_expresion, tipo_asignacion, st, t);
	}

	| {}	// Matching de llamada a procedimiento con UN solo argumento
	{
		lista_parametros = sf.funcion_proc(id, t, st);
		if (lista_parametros != null) {
			if (lista_parametros.size() != 1)
				sf.verificar_argumento(primera_expresion, lista_parametros, 0);
		}
	}
}


void Programa_completo() :
{
}
{
	{
		String label = newLabel();
		bloque.addInst(PCodeInstruction.OpCode.ENP, label);
	}
	<tPROC> <tID> <tIS>
	(Declaracion() <tPC>)*
	(Procedimiento() | Funcion())*
	<tBEGIN>
	{
		bloque.addComment(" Comienzo de main");
		bloque.addLabel(label);
	}
	(Instruccion_sin_return())+
	{
		bloque.addComment(" Fin de main");
		bloque.addInst(PCodeInstruction.OpCode.LVP);
		System.out.println(bloque.toString());
		bloque.clearBlock();
	}
	<tEND> <tPC>
}


// Devuelve un Symbol del tipo en cuestión, por valor o por referencia y sin nombre
Symbol Parametro_aux() :
{
	boolean por_referencia;
	Symbol tipo_parametro;
}
{
	({por_referencia = true;} <tREF> | {por_referencia = false;} {}) tipo_parametro = Tipos_variables() // Tipos_variables() devuelve UN symbol sin nombre de un tipo
	{
		if (por_referencia) tipo_parametro.parClass = Symbol.ParameterClass.REF;
		else tipo_parametro.parClass = Symbol.ParameterClass.VAL;
		return tipo_parametro;
	}
}


// Array por referencia con los símbolos leídos de parámetros
void Parametro(ArrayList<Symbol> lista_parametros) :
{
	ArrayList<String> array_nombres_variables = new ArrayList<>();
	Symbol tipo_parametros;
}
{
	Lista_IDS(array_nombres_variables) <tDOSP> tipo_parametros = Parametro_aux()
	{
		// Misma lógica que Declaracion(), se recoge un puntero a símbolo sin nombre y una lista de Strings,
		// se le asigna un nombre al puntero y se mete una copia en el array de simbolos
		for (String nombre_parametro : array_nombres_variables) {
			tipo_parametros.name = nombre_parametro.toLowerCase();
			lista_parametros.add(tipo_parametros.clone());
		}
	}
}


// Similar a Declaracion(), inserta en la tabla de simbolos un array de símbolos (la lista de parametros) y lo retorna
ArrayList<Symbol> Parametros() :
{
	ArrayList<Symbol> lista_parametros = new ArrayList<>();
	Token t = null;
}
{
	(t = <tAP> Parametro(lista_parametros) (<tPC> Parametro(lista_parametros))* <tCP>)?
	{
		for (Symbol simbolo : lista_parametros) {
			try {
				st.insertSymbol(simbolo);
				simbolo.nivel = simbolo.nivel - 1;
				simbolo.dir = sig[nivel_bloque];
				sig[nivel_bloque]++;
			}
			catch (AlreadyDefinedSymbolException a) {
				sf.simbolo_definido(simbolo.name, t.beginLine, t.endColumn);
			}
			catch (IndexArrayNotCorrect i) {
				sf.error("Los indices del array " + simbolo.name + " no son correctos", t.beginLine, t.endColumn);
			}
		}
		return lista_parametros;
	}
}


void Procedimiento() :
{
	Token nombre_procedimiento;
	SymbolProcedure simbolo_procedimiento;
}
{
	<tPROC> nombre_procedimiento = <tID>
	// Antes de leer la lista de parametros se inserta el simbolo procedimiento y se crea el bloque de parametros y variables locales
	{
		// Se crea el simbolo procedimiento sin parametros, que van un nivel por debajo
		simbolo_procedimiento = new SymbolProcedure(nombre_procedimiento.image.toLowerCase(), new ArrayList<Symbol>());
		try {st.insertSymbol(simbolo_procedimiento);}
		catch (AlreadyDefinedSymbolException a) {
			sf.simbolo_definido(nombre_procedimiento.image, nombre_procedimiento.beginLine, nombre_procedimiento.beginColumn);
		}
		catch (IndexArrayNotCorrect i) {}	// Se sabe que el simbolo no es un array
		st.insertBlock();
		nivel_bloque++;
	}
	simbolo_procedimiento.parList = Parametros() <tIS>	// Se asigna al simbolo del procedimiento la lista de parametros
	(Declaracion() <tPC>)*
	(Procedimiento() | Funcion())*
	<tBEGIN>
	(Instruccion_sin_return())+
	<tEND> <tPC>
	{
		st.removeBlock();
		sig[nivel_bloque] = 3;
		nivel_bloque--;
	}
}


// Igual a Procedimiento(), sólo cambia el return
void Funcion() :
{
	Token nombre_funcion;
	Symbol tipo_return;
	SymbolFunction simbolo_funcion;
	boolean return_valido = false;
	boolean instruccion;
	Token t;
}
{
	<tFUNC> nombre_funcion = <tID>
	{
		simbolo_funcion = new SymbolFunction(nombre_funcion.image, new ArrayList<Symbol>(), Symbol.Types.UNDEFINED);
		try {st.insertSymbol(simbolo_funcion);}
		catch (AlreadyDefinedSymbolException a) {
			sf.simbolo_definido(nombre_funcion.image, nombre_funcion.beginLine, nombre_funcion.beginColumn);
		}
		catch (IndexArrayNotCorrect i) {}
		st.insertBlock();
		nivel_bloque++;
	}
	// Se asigna la lista de parámetros, se recoge el tipo que retorna la función y se asigna al simbolo función
	simbolo_funcion.parList = Parametros() <tRETURN> tipo_return = Tipo_variable() <tIS> {simbolo_funcion.returnType = tipo_return.type;}
	(Declaracion() <tPC>)*
	(Procedimiento() | Funcion())*
	<tBEGIN>
	(instruccion = Instruccion_con_return(tipo_return.type)
	{
		if (instruccion) return_valido = true;
	})+
	<tEND> t = <tPC>
	{
		if (!return_valido) System.out.println("AVISO (" + Integer.toString(t.beginLine) + ", " + Integer.toString(t.endColumn) + "): Es posible que la función no alcance ningún return");
		st.removeBlock();
		sig[nivel_bloque] = 3;
		nivel_bloque--;
	}
}


void Instr_iterativa_sin_return():
{
	Trio tipo;
	Token t;
}
{
	{
		String label2 = CGUtils.newLabel();
		bloque.addLabel(label2);

	}
	t = <tWHILE> tipo = Expresion() <tLOOP>
    {
        sf.verificar_bool(tipo.tipo, t);
        String label = CGUtils.newLabel();
        bloque.addInst(PCodeInstruction.OpCode.JMF, label);
    }
	(Instruccion_sin_return())+
	{
        bloque.addInst(PCodeInstruction.OpCode.JMP, label2);
		bloque.addLabel(label);
    }
	<tEND> <tLOOP>
}


void Instr_condicional_sin_return():
{
    Trio tipo;
    Token t;
}
{
    t = <tIF> tipo = Expresion() <tTHEN>
    {
        sf.verificar_bool(tipo.tipo, t);
        String label = CGUtils.newLabel();
        bloque.addInst(PCodeInstruction.OpCode.JMF, label);
    }
    (Instruccion_sin_return())+
    {
        String label2 = CGUtils.newLabel();
        bloque.addInst(PCodeInstruction.OpCode.JMP, label2);
        bloque.addLabel(label);
    }
    MasIF(label2)
    <tEND> <tIF>
}


void MasIF(String label2):
{
    Trio tipo;
    Token t;
}
{
    t = <tELSIF> tipo = Expresion() <tTHEN>
    {
        sf.verificar_bool(tipo.tipo, t);
        String label = CGUtils.newLabel();
        bloque.addInst(PCodeInstruction.OpCode.JMF, label);
    }
    (Instruccion_sin_return())+
    {
        bloque.addInst(PCodeInstruction.OpCode.JMP, label2);
        bloque.addLabel(label);
    }
    MasIF(label2)
    | <tELSE> (Instruccion_sin_return())+ {bloque.addLabel(label2);}
    | {}
}


void Instr_iterativa_con_return(Symbol.Types tipo_a_retornar):
{
	Trio tipo;
	Token t;
}
{
	t = <tWHILE> tipo = Expresion() <tLOOP>
	{sf.verificar_bool(tipo.tipo, t);}
	(Instruccion_con_return(tipo_a_retornar))+
	<tEND> <tLOOP>
}


boolean Instr_condicional_con_return(Symbol.Types tipo_a_retornar):
{
	Trio tipo;
	Token t;
	boolean es_return = false;
	boolean return_leido = false;
	boolean return_else = false;
}
{
	t = <tIF> tipo = Expresion() <tTHEN>
	{
		sf.verificar_bool(tipo.tipo, t);
		String label = newLabel();
		bloque.addInst(PCodeInstruction.OpCode.JMF, label);
	}
	(es_return = Instruccion_con_return(tipo_a_retornar) {if (es_return) return_leido = true;})+
	{
        String label2 = CGUtils.newLabel();
        bloque.addInst(PCodeInstruction.OpCode.JMP, label2);
        bloque.addLabel(label);
	}
	return_else = MasIF_return(tipo_a_retornar, label2)
	<tEND> <tIF>
	{return return_leido && return_else;}
}


boolean MasIF_return(Symbol.Types tipo_a_retornar, String label2):
{
	Trio tipo;
	Token t;
	boolean es_return = false;
	boolean return_leido = false;
}
{
	(t = <tELSIF> tipo = Expresion() <tTHEN>
	{
        sf.verificar_bool(tipo.tipo, t);
        String label = CGUtils.newLabel();
        bloque.addInst(PCodeInstruction.OpCode.JMF, label);
    }
	(es_return = Instruccion_con_return(tipo_a_retornar) {if (es_return) return_leido = true;})+
	{
        bloque.addInst(PCodeInstruction.OpCode.JMP, label2);
        bloque.addLabel(label);
    }
	es_return = MasIF_return(tipo_a_retornar, label2);

	| <tELSE> (es_return = Instruccion_con_return(tipo_a_retornar) {if (es_return) return_leido = true;})+ {bloque.addLabel(label2);}
	| {} {return_leido = false;})
	{return return_leido && es_return;}
}
